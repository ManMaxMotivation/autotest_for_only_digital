import json
import random
import time
import logging
import re
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
success_logger = logging.getLogger('success_logger')
error_logger = logging.getLogger('error_logger')
success_handler = logging.FileHandler('positive_tests.log', mode='w', encoding='utf-8')
error_handler = logging.FileHandler('negative_tests.log', mode='w', encoding='utf-8')
success_logger.addHandler(success_handler)
error_logger.addHandler(error_handler)
success_logger.setLevel(logging.INFO)
error_logger.setLevel(logging.ERROR)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
def load_test_data(file_path):
    with open(file_path, "r", encoding="utf-8") as file:
        return json.load(file)

test_data = load_test_data("test_data.json")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞
options = webdriver.ChromeOptions()
driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

driver.get("https://only.digital/projects#brief")
time.sleep(5)  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

# –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å –∫—É–∫–∏ (–µ—Å–ª–∏ –æ–Ω–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è)
try:
    cookie_button = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, "//button[contains(@class, 'Cookie_rootButton__38Z2N')]"))
    )
    cookie_button.click()
    success_logger.info("–£—Å–ø–µ—à–Ω–æ: –∫–Ω–æ–ø–∫–∞ '–û–∫–µ–π' –Ω–∞–∂–∞—Ç–∞")
    time.sleep(1)
except Exception as e:
    error_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–û–∫–µ–π'. –û—à–∏–±–∫–∞: {e}")

# –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è reCAPTCHA –≤—Ä—É—á–Ω—É—é
input("–ü—Ä–æ–π–¥–∏—Ç–µ reCAPTCHA –≤—Ä—É—á–Ω—É—é –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

# –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
successful_tests = 0
failed_tests = 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
def fill_field(field_name, values, is_required=False):
    global successful_tests, failed_tests
    for value in values:
        try:
            field = driver.find_element(By.NAME, field_name)
            field.clear()
            field.send_keys(value)
            time.sleep(1)

            if is_required and not value:
                error_logger.error(f"–û—à–∏–±–∫–∞: –ø–æ–ª–µ {field_name} –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ")
                failed_tests += 1
            else:
                success_logger.info(f"–£—Å–ø–µ—à–Ω–æ: –ø–æ–ª–µ {field_name} –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º {value}")
                successful_tests += 1
        except Exception as e:
            error_logger.error(f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ {field_name}. –û—à–∏–±–∫–∞: {e}")
            failed_tests += 1

# –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
fill_field("name", test_data["your_contact_information"]["name"], is_required=True)
fill_field("phone", test_data["your_contact_information"]["phone"], is_required=True)
fill_field("email", test_data["your_contact_information"]["email"])
fill_field("company", test_data["your_contact_information"]["company"])

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–∫–±–æ–∫—Å—ã "About the project"
for xpath in test_data["about_project"]:
    try:
        checkbox = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, xpath))
        )
        driver.execute_script("arguments[0].click();", checkbox)
        time.sleep(1)
        success_logger.info(f"–£—Å–ø–µ—à–Ω–æ: —á–µ–∫–±–æ–∫—Å —Å XPath '{xpath}' –≤—ã–±—Ä–∞–Ω")
        successful_tests += 1
    except Exception as e:
        error_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ —á–µ–∫–±–æ–∫—Å—É '{xpath}'. –û—à–∏–±–∫–∞: {e}")
        failed_tests += 1

# –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ "Tell us about your project"
for text_value in test_data["tell_about_project"]:
    try:
        textarea = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "description"))
        )
        driver.execute_script("arguments[0].value = arguments[1];", textarea, text_value)
        time.sleep(1)
        success_logger.info(f"–£—Å–ø–µ—à–Ω–æ: –ø–æ–ª–µ 'Tell us about your project' –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º '{text_value}'")
        successful_tests += 1
    except Exception as e:
        error_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–ª—è 'Tell us about your project'. –û—à–∏–±–∫–∞: {e}")
        failed_tests += 1

# –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –±—é–¥–∂–µ—Ç
try:
    random_budget_xpath = random.choice(test_data["budget_options"])
    budget_radio = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.XPATH, random_budget_xpath))
    )
    driver.execute_script("arguments[0].click();", budget_radio)
    time.sleep(1)
    success_logger.info(f"–£—Å–ø–µ—à–Ω–æ: –≤—ã–±—Ä–∞–Ω –±—é–¥–∂–µ—Ç '{random_budget_xpath}'")
    successful_tests += 1
except Exception as e:
    error_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –±—é–¥–∂–µ—Ç–∞. –û—à–∏–±–∫–∞: {e}")
    failed_tests += 1

# –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ "How did you find us?"
try:
    random_source_xpath = random.choice(test_data["how_did_you_find_us"])
    source_checkbox = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.XPATH, random_source_xpath))
    )
    driver.execute_script("arguments[0].click();", source_checkbox)
    time.sleep(1)
    success_logger.info(f"–£—Å–ø–µ—à–Ω–æ: –≤—ã–±—Ä–∞–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ '{random_source_xpath}'")
    successful_tests += 1
except Exception as e:
    error_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ '{random_source_xpath}': {e}")
    failed_tests += 1

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "Start a project"
try:
    start_button = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Start a project')]"))
    )
    if start_button.is_enabled():
        success_logger.info("–ö–Ω–æ–ø–∫–∞ 'Start a project' –∞–∫—Ç–∏–≤–Ω–∞")
        successful_tests += 1
    else:
        error_logger.error("–û—à–∏–±–∫–∞: –∫–Ω–æ–ø–∫–∞ 'Start a project' –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
        failed_tests += 1
except Exception as e:
    error_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–Ω–æ–ø–∫–∏ 'Start a project'. –û—à–∏–±–∫–∞: {e}")
    failed_tests += 1

# –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
total_tests = successful_tests + failed_tests
print(f"\n=== –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç ===\n"
      f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}\n"
      f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}\n"
      f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tests}\n"
      f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–ï—Å—Ç—å –±–∞–≥–∏' if failed_tests > 0 else '–ë–∞–≥–æ–≤ –Ω–µ—Ç'}\n")

# –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
driver.quit()